AWSTemplateFormatVersion: "2010-09-09"
Description: cfn-empty-s3-bucket

Resources:

  EmptyS3BucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
                - s3:ListBucket
                - s3:ListBucketVersions
              Resource: !GetAtt Bucket.Arn
            - Effect: Allow
              Action:
                - s3:DeleteObject
                - s3:DeleteObjectVersion
              Resource: !Sub "${Bucket.Arn}/*"

  EmptyS3Bucket:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom resource function
      Handler: index.handler
      Role: !GetAtt EmptyS3BucketRole.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Code:
        ZipFile: |
          const AWS = require('aws-sdk')
          const s3 = new AWS.S3()
          const response = require('cfn-response')

          // promisify response.send
          const sendResponse = (event, context, ...args) => {
            return new Promise((resolve, reject) => {
              context.done = (err) => { err ? reject(err) : resolve() }
              response.send(event, context, ...args)
            })
          }

          const deleteObjects = async bucket => {
            console.log(`Deleting objects from ${bucket}`)
            let token
            while (true) {
              const response = await s3.listObjectsV2({
                Bucket: bucket,
                ContinuationToken: token
              }).promise()
              const objects = response.Contents.map((item) => ({ Key: item.Key }))
              if (objects.length) {
                await s3.deleteObjects({
                  Bucket: bucket,
                  Delete: {
                    Objects: objects
                  }
                }).promise()
              }
              if (!response.IsTruncated) break
              token = response.NextContinuationToken
            }
          }

          const deleteVersions = async bucket => {
            console.log(`Deleting versions and delete markers from ${bucket}`)
            let keyMarker
            let versionIdMarker
            while (true) {
              const response = await s3.listObjectVersions({
                Bucket: bucket,
                KeyMarker: keyMarker,
                VersionIdMarker: versionIdMarker
              }).promise()
              const objects = response.Versions.concat(response.DeleteMarkers).map((item) => ({ Key: item.Key, VersionId: item.VersionId }))
              if (objects.length) {
                await s3.deleteObjects({
                  Bucket: bucket,
                  Delete: {
                    Objects: objects
                  }
                }).promise()
              }
              if (!response.IsTruncated) break
              keyMarker = response.NextKeyMarker
              versionIdMarker = response.NextVersionIdMarker
            }
          }

          exports.handler = async (event, context) => {
            console.log('Request body:', JSON.stringify(event, null, 2))
            try {
              if (event.RequestType === 'Delete') {
                const bucket = event.ResourceProperties.Bucket
                await deleteObjects(bucket)
                await deleteVersions(bucket)
              }
            }
            catch (err) {
              return sendResponse(event, context, response.FAILED, { Error: err })
            }
            return sendResponse(event, context, response.SUCCESS, {})
          }

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  BucketEmptier:
    Type: Custom::EmptyS3Bucket
    Properties:
      ServiceToken: !GetAtt EmptyS3Bucket.Arn
      Bucket: !Ref Bucket
